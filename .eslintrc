{
    "parser": "babel-eslint",

    "env": {                           // http://eslint.org/docs/user-guide/configuring.html#specifying-environments
      "browser": true,                 // Browser global variables
      "node": true,                    // Node.js global variables and Node.js scoping.
      "jest": true,                    // Adds all of the Jest testing global variables.
      "es6": true                      // Enable all ECMAScript 6 features except for modules.
    },

    "parserOptions": {
      "ecmaVersion": 6,
      "sourceType": "module",
      "ecmaFeatures": {
        "globalReturn": true,
        "jsx": true
      }
    },

    "ignorePatterns": [
      "public/",
      "node_modules/"
    ],

    "extends": [
      "react",
      "plugin:promise/recommended",
      "plugin:import/errors",
      "plugin:import/warnings"
    ],

    "settings": {
      "import/resolver": {
        "node": {
          "extensions": [".js", ".jsx"]
        }
      },
      "react": {
        "version": "detect"
      }
    },

    "plugins": [
      "no-only-tests",
      "promise",
      "import"
    ],

    "rules": {
      // Possible Errors
      "comma-dangle": 2,                  // disallow or enforce trailing commas (recommended)
      "no-cond-assign": 2,                // disallow assignment in conditional expressions (recommended)
      "no-console": 2,                    // disallow use of console in the node environment (recommended)
      "no-constant-condition": 2,         // disallow use of constant expressions in conditions (recommended)
      "no-control-regex": 2,              // disallow control characters in regular expressions (recommended)
      "no-debugger": 2,                   // disallow use of debugger (recommended)
      "no-dupe-args": 2,                  // disallow duplicate arguments in functions (recommended)
      "no-dupe-keys": 2,                  // disallow duplicate keys when creating object literals (recommended)
      "no-duplicate-case": 2,             // disallow a duplicate case label. (recommended)
      "no-empty-character-class": 2,      // disallow the use of empty character classes in regular expressions (recommended)
      "no-empty": 2,                      // disallow empty statements (recommended)
      "no-ex-assign": 2,                  // disallow assigning to the exception in a catch block (recommended)
      "no-extra-boolean-cast": 2,         // disallow double-negation boolean casts in a boolean context (recommended)
      "no-extra-parens": 0,               // disallow unnecessary parentheses
      "no-extra-semi": 2,                 // disallow unnecessary semicolons (recommended)
      "no-func-assign": 2,                // disallow overwriting functions written as function declarations (recommended)
      "no-inner-declarations": 2,         // disallow function or variable declarations in nested blocks (recommended)
      "no-invalid-regexp": 2,             // disallow invalid regular expression strings in the RegExp constructor (recommended)
      "no-irregular-whitespace": 2,       // disallow irregular whitespace outside of strings and comments (recommended)
      "no-negated-in-lhs": 2,             // disallow negation of the left operand of an in expression (recommended)
      "no-obj-calls": 2,                  // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
      "no-regex-spaces": 2,               // disallow multiple spaces in a regular expression literal (recommended)
      "no-sparse-arrays": 2,              // disallow sparse arrays (recommended)
      "no-unreachable": 2,                // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
      "use-isnan": 2,                     // disallow comparisons with the value NaN (recommended)
      "valid-jsdoc": 2,                   // Ensure JSDoc comments are valid
      "valid-typeof": 2,                  // Ensure that the results of typeof are compared against a valid string (recommended)
      "no-unexpected-multiline": 2,       // Avoid code that looks like two expressions but is actually one
      "arrow-spacing": 2,                 // Always use space before and after the es6 arrow
      "no-whitespace-before-property": 2, // disallow whitespace before propertie
      "no-const-assign": 2,               // disallow modifying variables that are declared using const keyword

      // Best Practices
      "accessor-pairs": 0,              // Enforces getter/setter pairs in objects
      "block-scoped-var": 0,            // treat var statements as if they were block scoped
      "complexity": 0,                  // specify the maximum cyclomatic complexity allowed in a program
      "consistent-return": 2,           // require return statements to either always or never specify values
      "curly": 2,                       // specify curly brace conventions for all control statements
      "default-case": 2,                // require default case in switch statements
      "dot-notation": 0,                // encourages use of dot notation whenever possible
      "dot-location": [2, "property"],  // enforces consistent newlines before or after dots
      "eqeqeq": 2,                      // require the use of === and !==
      "guard-for-in": 2,                // make sure for-in loops have an if statement
      "no-alert": 1,                    // disallow the use of alert, confirm, and prompt
      "no-caller": 2,                   // disallow use of arguments.caller or arguments.callee
      "no-div-regex": 2,                // disallow division operators explicitly at beginning of regular expression
      "no-else-return": 2,              // disallow else after a return in an if
      "no-labels": [2, { "allowLoop": true, "allowSwitch": true }], // disallow use of labels for anything other than loops and switches
      "no-eq-null": 2,                  // disallow comparisons to null without a type-checking operator
      "no-eval": 2,                     // disallow use of eval()
      "no-extend-native": 2,            // disallow adding to native types
      "no-extra-bind": 2,               // disallow unnecessary function binding
      "no-fallthrough": 2,              // disallow fallthrough of case statements (recommended)
      "no-floating-decimal": 2,         // disallow the use of leading or trailing decimal points in numeric literals
      "no-implied-eval": 2,             // disallow use of eval()-like methods
      "no-iterator": 2,                 // disallow usage of iterator property
      "no-lone-blocks": 2,              // disallow unnecessary nested blocks
      "no-loop-func": 2,                // disallow creation of functions within loops
      "no-multi-spaces": [2, { "exceptions": { "Property": true, "VariableDeclarator": true } }], // disallow use of multiple spaces
      "no-multi-str": 2,                // disallow use of multiline strings
      "no-native-reassign": 2,          // disallow reassignments of native objects
      "no-new-func": 2,                 // disallow use of new operator for Function object
      "no-new-wrappers": 2,             // disallows creating new instances of String,Number, and Boolean
      "no-new": 2,                      // disallow use of the new operator when not part of an assignment or comparison
      "no-octal-escape": 2,             // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
      "no-octal": 2,                    // disallow use of octal literals (recommended)
      "no-param-reassign": 2,           // disallow reassignment of function parameters
      "no-process-env": 0,              // disallow use of process.env
      "no-proto": 2,                    // disallow usage of proto property
      "no-redeclare": 2,                // disallow declaring the same variable more than once (recommended)
      "no-return-assign": 2,            // disallow use of assignment in return statement
      "no-script-url": 2,               // disallow use of javascript: urls.
      "no-self-compare": 2,             // disallow comparisons where both sides are exactly the same
      "no-sequences": 2,                // disallow use of the comma operator
      "no-throw-literal": 2,            // restrict what can be thrown as an exception
      "no-unused-expressions": 2,       // disallow usage of expressions in statement position
      "no-void": 2,                     // disallow use of the void operator
      "no-warning-comments": 1,         // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
      "no-with": 2,                     // disallow use of the with statement
      "radix": 2,                       // require use of the second argument for parseInt()
      "vars-on-top": 0,                 // require declaration of all vars at the top of their containing scope
      "wrap-iife": 2,                   // require immediate function invocation to be wrapped in parentheses
      "yoda": [2, "never"],             // require or disallow Yoda conditions

      // Strict Mode
      "strict": 0,                              // controls location of Use Strict Directives

      // Variables
      "no-catch-shadow": 2,                     // disallow the catch clause parameter name being the same as a variable in the outer scope
      "no-delete-var": 2,                       // disallow deletion of variables (recommended)
      "no-label-var": 2,                        // disallow labels that share a name with a variable
      "no-shadow-restricted-names": 2,          // disallow shadowing of names such as arguments
      "no-shadow": 2,                           // disallow declaration of variables already declared in the outer scope
      "no-undef-init": 2,                       // disallow use of undefined when initializing variables
      "no-undef": 2,                            // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
      "no-undefined": 0,                        // disallow use of undefined variable
      "no-unused-vars": 2,                      // disallow declaration of variables that are not used in the code (recommended)
      "no-use-before-define": [2, "nofunc"],    // disallow use of variables before they are defined

      // Stylistic Issues
      // "array-bracket-spacing": 2, // Not supported in current version
      "brace-style": [2, "1tbs", { "allowSingleLine": true }],
      "camelcase": [2, { "properties": "always" }],
      "comma-spacing": [2, { "before": false, "after": true }],
      "comma-style": [2, "last"],
      "computed-property-spacing": [2, "never"],
      "consistent-this": 0,
      "eol-last": 2,
      "func-names": 0,
      "func-style": [2, "declaration", { "allowArrowFunctions": true }],
      "prefer-arrow-callback": 2,
      "indent": [2, 2, { "SwitchCase": 1 }],
      "key-spacing": [2, { "beforeColon": false, "afterColon": true }],
      "lines-around-comment": 0,
      "linebreak-style": 0,
      "max-nested-callbacks": 0,
      "new-cap": 2,
      "new-parens": 2,
      "newline-after-var": 0,
      "no-array-constructor": 2,
      "no-continue": 2,
      "no-inline-comments": 0,
      "no-lonely-if": 2,
      "no-mixed-spaces-and-tabs": 2,
      "no-multiple-empty-lines": [1, { "max": 1 }],
      "no-nested-ternary": 2,
      "no-new-object": 2,
      "no-spaced-func": 2,
      "no-ternary": 0,
      "no-trailing-spaces": 2,
      "no-underscore-dangle": 2,
      "no-unneeded-ternary": 2,
      "object-curly-spacing": [2, "always"],
      "one-var": [2, "never"],
      "operator-assignment": 0,
      "operator-linebreak": [2, "after"],
      "padded-blocks": 0,
      "quote-props": 0,
      "quotes": [2, "single"],
      "semi-spacing": [2, { "before": false, "after": true }],
      "semi": [2, "always"],
      "sort-vars": 0,
      "keyword-spacing": [2, { "before": true, "after": true }],
      "space-before-blocks": [2, "always"],
      "space-before-function-paren": [2, { "anonymous": "always", "named": "never" }],
      "space-in-parens": [2, "never"],
      "space-infix-ops": [2, { "int32Hint": false }],
      "space-unary-ops": 2,
      "spaced-comment": [2, "always"],
      "wrap-regex": 0,

      // ECMAScript 6
      "constructor-super": 2,
      "generator-star-spacing": [2, "before"],
      "no-this-before-super": 2,
      "no-var": 2,
      "object-shorthand": 0,
      "prefer-const": 2,

      // Promise plugin
      "promise/avoid-new": 0,
      "promise/no-nesting": 0,
      "promise/no-callback-in-promise": 0
    }
  }
